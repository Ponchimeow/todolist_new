{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","Form","form","Title","label","Input","input","Button","button","AddBtn","ItemTitle","Item","ItemText","ItemBtn","ItemInput","handleEdit","id","text","todoList","setTodoList","editingID","setEditingID","map","todo","value","handleDelete","filter","handleCheck","state","Add","addTodo","useState","setValue","onSubmit","e","preventDefault","htmlFor","name","type","placeholder","required","onChange","target","className","icon","faPlusSquareRegular","App","useEffect","length","uuidv1","key","autoFocus","defaultValue","faEditSolid","onClick","faTrashAltSolid","faCheckSquareRegular","faCheckSquareSolid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ed90a6f0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n  faTrashAlt as faTrashAltSolid,\n  faEdit as faEditSolid,\n  faCheckSquare as faCheckSquareSolid,\n} from '@fortawesome/free-solid-svg-icons';\nimport {\n  faPlusSquare as faPlusSquareRegular,\n  faCheckSquare as faCheckSquareRegular,\n} from '@fortawesome/free-regular-svg-icons';\nimport { v1 as uuidv1 } from 'uuid';\nimport './App.css';\n\n\nconst Container = styled.div`\n  margin: 3rem auto;\n  max-width:  25em;\n  width:  90vw;\n`;\n\nconst Form = styled.form`\n  display:  flex;\n  position: relative;\n`;\n\nconst Title = styled.label`\n  position: absolute;\n  bottom: 100%;\n  font-size: 1.1rem;\n  font-weight: 800;\n  margin: 0.2rem;\n`;\n\nconst Input = styled.input`\n  flex-grow: 1;\n  font-size:  0.9rem;\n  border: 2px solid currentColor;\n  outline:  none;\n\n&:placeholder{\n  font-family:inherit;\n}\n&:focus{\n  border-color: #005CAF;\n}\n&:focus + button{\n  background-color: #005CAF;\n}\n`;\n\nconst Button = styled.button`\n  font-size:0.8rem;\n  border: none;\n  padding: 0.5rem;\n  color: #FAFAFA;\n  background-color: #0F2540;\n  cursor: pointer;\n`;\n\nconst AddBtn = styled(Button)`\n&:focus{\n  outline-color: #005CAF;\n  background-color: #005CAF;\n  border-radius: 0;\n}\n`;\n\nconst ItemTitle = styled.div`\n  font-size:  0.9rem;\n  margin: 0.3rem;\n  font-weight: 700;\n`;\n\nconst Item = styled.div`\n  display:  flex;\n  border-bottom:  1px solid;\n  font-size:  0.9rem;\n`;\n\nconst ItemText = styled.div`\n  display:  flex;\n  flex-grow:  1;\n  align-items:  center;\n`;\n\nconst ItemBtn = styled.div`\n  cursor: pointer;\n  margin: 6px 5px;\n`;\n\nconst ItemInput = styled(Input)`\n  border: none;\n`;\n\nconst handleEdit = (id, text, todoList, setTodoList, editingID, setEditingID) => {\n  setEditingID(editingID === '' ? editingID = id : (editingID !== id ? editingID = id : setTodoList(\n    text === '' ? todoList :\n      todoList.map(\n        todo => todo.id === id ? { ...todo, value: text } : todo\n      )\n  )))\n};\n\nconst handleDelete = (id, todoList, setTodoList) => {\n  setTodoList(todoList.filter(todo => (todo.id !== id)));\n};\n\nconst handleCheck = (id, todoList, setTodoList) => {\n  setTodoList(\n    todoList.map(\n      todo =>\n        todo.id === id ? { ...todo, state: !todo.state } : todo\n    )\n  )\n};\n\nconst Add = ({ addTodo }) => {\n  const [value, setValue] = useState('');\n\n  return (\n    <Form onSubmit={(e) => {\n      e.preventDefault();\n      addTodo(value);\n      setValue('')\n    }}>\n      <Title htmlFor=\"add__input\">\n        代辦清單\n      </Title>\n      <Input\n        id=\"add__input\"\n        name=\"add__input\"\n        type=\"text\"\n        placeholder=\"請輸入待辦事項\"\n        value={value}\n        required\n        onChange={(e) => {\n          setValue(e.target.value);\n        }}\n      />\n      <AddBtn >\n        <FontAwesomeIcon\n          className=\"fa-2x\"\n          icon={faPlusSquareRegular}\n        />\n      </AddBtn>\n    </Form >\n  );\n}\n\nconst App = () => {\n  const [todoList, setTodoList] = useState([])\n  const [editingID, setEditingID] = useState('');\n  const [value, setValue] = useState('');\n\n  useEffect(() => {\n    return (() => {\n    })\n  })\n\n  return (\n    <Container>\n      <Add addTodo={(text) => {\n        if (text.length > 0) {\n          setTodoList([...todoList,\n          {\n            id: uuidv1(),\n            value: text,\n            state: false,\n          }\n          ])\n        }\n      }}\n      />\n      <ItemTitle>代辦項目</ItemTitle>\n      {\n        todoList.map((todo) => {\n          if (!todo.state && todo.id !== editingID) {\n            return (\n              <Item key={todo.id}>\n                <ItemText>{todo.value}</ItemText>\n                <ItemBtn>\n                  <FontAwesomeIcon\n                    className=\"fa-lg\"\n                    icon={faEditSolid}\n                    onClick={() => { handleEdit(todo.id, '', todoList, setTodoList, editingID, setEditingID) }}\n                  />\n                </ItemBtn>\n                <ItemBtn>\n                  <FontAwesomeIcon\n                    className=\"fa-lg\"\n                    icon={faTrashAltSolid}\n                    onClick={() => { handleDelete(todo.id, todoList, setTodoList) }}\n                  />\n                </ItemBtn>\n                <ItemBtn>\n                  <FontAwesomeIcon\n                    className=\"fa-lg\"\n                    icon={faCheckSquareRegular}\n                    onClick={() => { handleCheck(todo.id, todoList, setTodoList) }}\n                  />\n                </ItemBtn>\n              </Item>\n            )\n          } else {\n            return (\n              <Item key={todo.id}>\n                <ItemInput\n                  autoFocus\n                  type=\"text\"\n                  defaultValue={todo.value}\n                  onChange={(e) => {\n                    setValue(e.target.value)\n                  }}\n                />\n                <ItemBtn>\n                  <FontAwesomeIcon\n                    className=\"fa-lg\"\n                    icon={faEditSolid}\n                    onClick={() => { handleEdit(todo.id, value, todoList, setTodoList, editingID, setEditingID) }}\n                  />\n                </ItemBtn>\n                <ItemBtn>\n                  <FontAwesomeIcon\n                    className=\"fa-lg\"\n                    icon={faTrashAltSolid}\n                    onClick={() => { handleDelete(todo.id, todoList, setTodoList) }}\n                  />\n                </ItemBtn>\n                <ItemBtn>\n                  <FontAwesomeIcon\n                    className=\"fa-lg\"\n                    icon={faCheckSquareRegular}\n                    onClick={() => { handleCheck(todo.id, todoList, setTodoList) }}\n                  />\n                </ItemBtn>\n              </Item>\n            )\n          }\n        })\n      }\n      <ItemTitle>完成項目</ItemTitle>\n      {todoList.map((todo) => {\n        return (\n          !todo.state ? '' :\n            <Item key={todo.id}>\n              <ItemText>{todo.value}</ItemText>\n              <ItemBtn>\n                <FontAwesomeIcon\n                  className=\"fa-lg\"\n                  icon={faTrashAltSolid}\n                  onClick={() => { handleDelete(todo.id, todoList, setTodoList) }}\n                />\n              </ItemBtn>\n              <ItemBtn>\n                <FontAwesomeIcon\n                  className=\"fa-lg\"\n                  icon={faCheckSquareSolid}\n                  onClick={() => { handleCheck(todo.id, todoList, setTodoList) }}\n                />\n              </ItemBtn>\n            </Item>\n        )\n      })}\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}